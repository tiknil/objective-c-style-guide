#########################################################################################################
# 						An Uncrustify configuration file to match the         							#
# 		  				 official tiknil.com Objective-C style guide.		  							#
#															  											#
#      				   https://github.com/tiknil/objective-c-style-guide/	  							#
#########################################################################################################

#########################################################################################################
###									GENERAL OPTIONS 												  ###
#########################################################################################################

# The type of line endings
newlines                                  = auto     # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size                            = 8        # number

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size                           = 8        # number

# The ASCII value of the string escape char, usually 92 (\) or 94 (^). (Pawn)
string_escape_char                        = 92       # number

# Alternate string escape char for Pawn. Only works right before the quote char.
string_escape_char2                       = 0        # number

# Replace tab characters found in string literals with the escape sequence \t instead.
string_replace_tab_chars                  = false    # false/true

# Allow interpreting '>=' and '>>=' as part of a template in 'void f(list<list<B>>=val);'.
# If true (default), 'assert(x<0 && y>=3)' will be broken.
# Improvements to template detection may make this option obsolete.
tok_split_gte                             = false    # false/true

# Override the default ' *INDENT-OFF*' in comments for disabling processing of part of the file.
disable_processing_cmt                    = ""         # string

# Override the default ' *INDENT-ON*' in comments for enabling processing of part of the file.
enable_processing_cmt                     = ""         # string

# Control what to do with the UTF-8 BOM (recommend 'remove')
utf8_bom                                  = remove   # ignore/add/remove/force

# If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8
utf8_byte                                 = false    # false/true

# Force the output encoding to UTF-8
utf8_force                                = false    # false/true

#########################################################################################################
###											 INDENT 												  ###
#########################################################################################################

# Indent OC blocks at brace level instead of usual rules.
indent_oc_block                           = true    # false/true

# Indent OC blocks in a message relative to the parameter name.
# 0=use indent_oc_block rules, 1+=spaces to indent
indent_oc_block_msg                       = 0        # number

# Minimum indent for subsequent parameters
indent_oc_msg_colon                       = 0        # number

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns                            = 4        # number

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4. Negative value is absolute and not increased for each ( level
indent_continue                           = 2        # number

indent_with_tabs = 0
indent_cmt_with_tabs = false
indent_align_string = false
indent_xml_string = 0
indent_brace = 0
indent_braces = false
indent_braces_no_func = false
indent_braces_no_class = false
indent_braces_no_struct = false
indent_brace_parent = false
indent_namespace = false
indent_namespace_level = 0
indent_namespace_limit = 0
indent_extern = true
indent_class = true
indent_class_colon = false
indent_ctor_init_leading = 2
indent_ctor_init = 0
indent_else_if = false
indent_var_def_blk = 0
indent_var_def_cont = false
indent_func_def_force_col1 = false

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                    = true    # false/true

# Same as indent_func_call_param, but for function defs
indent_func_def_param                     = true    # false/true

indent_func_proto_param = false
indent_func_class_param = false
indent_func_ctor_var_param = false
indent_template_param = false
indent_func_param_double = false
indent_func_const = 0
indent_func_throw = 0
indent_member = 0
indent_sing_line_comments = 0
indent_relative_single_line_comments = false

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                        = 4        # number

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
indent_case_shift                         = 0        # number

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
indent_case_brace                         = 0        # number

indent_col1_comment = false
indent_label = 1
indent_access_spec = 1
indent_access_spec_body = false
indent_paren_nl = false
indent_paren_close = 0
indent_comma_paren = false
indent_bool_paren = false
indent_first_bool_expr = false
indent_square_nl = false
indent_preserve_sql = false
indent_align_assign = true

#########################################################################################################
###											 SPACING 												  ###
#########################################################################################################

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
sp_after_oc_scope                         = add   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'
sp_after_oc_colon                         = remove   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'
sp_before_oc_colon                        = remove   # ignore/add/remove/force


# Add or remove space after the colon in immutable dictionary expression
# 'NSDictionary *test = @{@"foo" :@"bar"};'
sp_after_oc_dict_colon                    = add   # ignore/add/remove/force

# Add or remove space before the colon in immutable dictionary expression
# 'NSDictionary *test = @{@"foo" :@"bar"};'
sp_before_oc_dict_colon                   = add   # ignore/add/remove/force


# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'
sp_after_send_oc_colon                    = remove   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'
sp_before_send_oc_colon                   = remove   # ignore/add/remove/force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'
sp_after_oc_type                          = remove   # ignore/add/remove/force

# Add or remove space after the first (type) in message specs
# '-(int) f:(int)x;' vs '-(int)f:(int)x;'
sp_after_oc_return_type                   = add   # ignore/add/remove/force

# Add or remove space between '@selector' and '('
# '@selector(msgName)' vs '@selector (msgName)'
# Also applies to @protocol() constructs
sp_after_oc_at_sel                        = remove   # ignore/add/remove/force

# Add or remove space between '@selector(x)' and the following word
# '@selector(foo) a:' vs '@selector(foo)a:'
sp_after_oc_at_sel_parens                 = add   # ignore/add/remove/force

# Add or remove space inside '@selector' parens
# '@selector(foo)' vs '@selector( foo )'
# Also applies to @protocol() constructs
sp_inside_oc_at_sel_parens                = remove   # ignore/add/remove/force

# Add or remove space before a block pointer caret
# '^int (int arg){...}' vs. ' ^int (int arg){...}'
sp_before_oc_block_caret                  = ignore   # ignore/add/remove/force

# Add or remove space after a block pointer caret
# '^int (int arg){...}' vs. '^ int (int arg){...}'
sp_after_oc_block_caret                   = remove   # ignore/add/remove/force


# Add or remove space between the receiver and selector in a message.
# '[receiver selector ...]'
sp_after_oc_msg_receiver                  = add   # ignore/add/remove/force

# Add or remove space after @property.
sp_after_oc_property                      = force   # ignore/add/remove/force

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
sp_type_func                              = force   # ignore/add/remove/force

# Add or remove space inside '{}'
sp_inside_braces_empty                    = ignore   # ignore/add/remove/force

# Add or remove space inside '(' and ')'
sp_inside_paren                           = remove   # ignore/add/remove/force

# Add or remove space between ')' and '{'
sp_paren_brace = force

# Add or remove space before pointer star '*'
sp_before_ptr_star                        = force   # ignore/add/remove/force

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'ignore', sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star                = ignore   # ignore/add/remove/force

# Add or remove space between pointer stars '*'
sp_between_ptr_star                       = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star                         = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function calls
sp_func_call_paren                        = remove   # ignore/add/remove/force

nl_after_func_body = 2

# Whether to remove blank lines after '{'
eat_blanks_after_open_brace               = false    # false/true

# Whether to remove blank lines before '}'
eat_blanks_before_close_brace             = false    # false/true

# If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.
mod_move_case_break                       = false    # false/true

# Will add or remove the braces around a fully braced case statement.
# Will only remove the braces if there are no variable declarations in the block.
mod_case_brace                            = ignore   # ignore/add/remove/force

#########################################################################################################
###							Newline adding and removing options  									  ###
#########################################################################################################

# Whether to collapse empty blocks between '{' and '}'
nl_collapse_empty_body                    = false    # false/true

# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'
nl_assign_leave_one_liners                = true    # false/true

nl_enum_brace = remove
nl_struct_brace = remove
nl_union_brace = remove
nl_if_brace = remove
nl_brace_else = remove
nl_elseif_brace = remove
nl_else_brace = remove
nl_else_if = remove
nl_for_brace = remove
nl_while_brace = remove
nl_func_decl_end = remove
nl_func_def_end = remove
nl_fcall_brace = remove

# Add or remove a newline between a case ':' and '{'. Overrides nl_after_case.
nl_case_colon_brace                       = remove   # ignore/add/remove/force

# Add or remove newline between function signature and '{'
nl_fdef_brace                             = force   # ignore/add/remove/force

#########################################################################################################
###										ALIGN OPTIONS 			  									  ###
#########################################################################################################

# Whether to align any attribute after the variable name
align_var_def_attribute                   = false    # false/true

